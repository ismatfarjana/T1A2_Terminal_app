class Operator
  def initialize(player:, computer:, game:)
    @player = player
    @computer = computer
    @game = game
  end

  def start_round(board: Board.new)
    if game.round_left?
      sleep 2
      board.display
      take_position(board: board)
      game.reduce_round
      start_round
    end
  end

  private

  attr_reader :player, :computer, :game

  def take_position(board:)
    one ='ùüô'
    nine = 'ùü°'
    if board.continue_round?(player: player, computer: computer)
      puts 'C ú·¥è·¥ès·¥á ·¥Ä ·¥ò ü·¥Ä·¥Ñ·¥á “ì Ä·¥è·¥ç '.colorize(:light_green) +"#{one}".colorize(:light_red)+' ·¥õ·¥è '.colorize(:light_green)+"#{nine}".colorize(:light_red)+' ·¥õ·¥è ·¥ò ü·¥Ä·¥Ñ·¥á  è·¥è·¥ú Ä s…™…¢…¥ ·¥è…¥ ·¥õ ú·¥á  ô·¥è·¥Ä Ä·¥Ö'.colorize(:light_green).bold
      position = gets.chomp.to_i
      board.place_sign(sign: player.sign, position: position)
      sleep 1
      computers_position = board.available_places.sample
      if board.available_places.size != 0
        board.place_sign(sign: computer.sign, position: computers_position)
        puts "B·¥è·¥õ ·¥Ñ ú·¥è·¥ès·¥á ·¥ò·¥ès…™·¥õ…™·¥è…¥ #{computers_position}".colorize(:light_cyan)
      end
      sleep 1
      board.display
      take_position(board: board)
    else
      if board.winning_pattern?(sign: player.sign)
        player.increase_scores
        puts 'Y·¥è·¥ú ·¥°…™…¥ ·¥õ ú…™s  Ä·¥è·¥ú…¥·¥Ö'.colorize(:light_red)
      elsif board.winning_pattern?(sign: computer.sign)
        computer.increase_scores
        puts 'B·¥è·¥õ ·¥°…™…¥s ·¥õ ú…™s  Ä·¥è·¥ú…¥·¥Ö'.colorize(:light_cyan)
      else
        puts 'T ú…™s  Ä·¥è·¥ú…¥·¥Ö ·¥°·¥Äs ·¥Ä ·¥Ö Ä·¥Ä·¥°'.colorize(:yellow)
      end
    end
  end
end